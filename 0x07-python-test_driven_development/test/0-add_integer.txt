# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

# This module defines an integer addition function called add_integer(a, b=98).

Usage
=====

# The add_integer(...) function returns the addition of its two arguments. For numbers,
# that value is equivalent to using the + operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer  # Import the add_integer function
    >>> add_integer(2, 3)  # Add two integers: 2 and 3
    5

::

    >>> add_integer(2, -3)  # Add an integer (2) and a negative integer (-3)
    -1

# The function also works with floating-point values.

::

    >>> add_integer(2.0, 3.0)  # Add two floating-point numbers
    5

# Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(2.9, 0.2)  # Add a float (2.9) and a float (0.2) cast to int
    2

::

    >>> add_integer(-2.9, -0.2)  # Add a negative float (-2.9) and a negative float (-0.2) cast to int
    -2

# Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)  # Add a float (2.3) and a negative integer (-3)
    -1

# The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)  # Add an integer (2) with the default second argument (98)
    100

Non-Numbers
===========

# add_integer() expects that both arguments are either integers or floats.
# If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)  # Attempt to add a string and an integer
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")  # Attempt to add an integer and a string
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)  # Attempt to add None as the first argument
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)  # Attempt to add a float and None as the second argument
    Traceback (most recent call last):
    TypeError: b must be an integer

# If both arguments are non-integers and non-floats, a TypeError message is only
# printed for the first argument.

::

    >>> add_integer("hello", "there")  # Attempt to add two strings
    Traceback (most recent call last):
    TypeError: a must be an integer

# The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))  # Attempt to add infinity
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))  # Attempt to add an integer and infinity
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

# And again with NaN numbers.

::

    >>> add_integer(float('nan'))  # Attempt to add NaN
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))  # Attempt to add an integer and NaN
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

